# coding: utf-8
import sys
import csv
from pandas import Series
import pandas as pd
import numpy as np
import geopandas as gpd
from geopandas import GeoDataFrame, GeoSeries
import shapely
from shapely.wkt import loads, dumps
from shapely.geometry import shape, Polygon, Point
from shapely.ops import transform
import geojson
import json
import Geohash
from IPython.display import display, clear_output
import folium
from datetime import date
import time
from fuzzywuzzy import fuzz
from functools import partial
import pyproj
import fiona

# pd.options.mode.chained_assignment = None 
pd.set_option('display.max_columns', None)


project = partial(
    pyproj.transform,
    pyproj.Proj("+init=EPSG:4326"),
    pyproj.Proj("+init=EPSG:2163"))


def get_geohash(wkt):
    '''
    generate a geohash from a wkt
    '''
    if type(wkt) == str:
        wkt = loads(wkt)
    y = wkt.centroid.y
    x = wkt.centroid.x
    ghash = Geohash.encode(float(y), float(x), precision=10)
    return ghash


def drop_fields(this_df, list_of_fields):
    try:
        this_df = this_df.drop([field for field in list_of_fields], axis = 1)
    except:
        pass
    return this_df

def get_json_coords(wkt):
    '''
    get only the json coordinates from a wkt
    '''
    if type(wkt) == str:
        wkt = loads(wkt)
    new_geo = geojson.Feature(geometry=wkt, properties={})
    return new_geo.geometry

def get_json_full(wkt):
    '''
    get a full json object from wkt
    '''
    if type(wkt) == str:
        wkt = loads(wkt)
    new_geo = geojson.Feature(geometry=wkt, properties={})
    return new_geo

def get_wkt(json):
    '''pass in a json object get back a wkt object'''
    try:
        return shape(json)
    except:
        return ''

def get_geofence(wkt, size):
    '''
    get a geofence wkt
    '''
    if type(wkt) == str:
        wkt = loads(wkt) 
    return wkt.buffer(size)   

def get_new_id(this_df):
    '''
    turn the _id into a new geohashed id
    '''
    this_df['new_id'] = this_df.apply(lambda row: row['_id'].split(':')[0] + ':' + str(get_geohash(row['geometry'])), axis = 1)
    return this_df

def write_json(json_series, output_file):
    '''
    write a series (usually after running format_json) to an output file
    '''
    output_df = pd.DataFrame({'col':list(json_series)})
    output_df.to_csv(output_file, index=False, header=False, quoting=csv.QUOTE_NONE, sep="\n")

def write_gdf(this_gdf, output_file):
    '''
    write a geodataframe to an output file
    '''
    this_gdf.to_csv(output_file, index=False, header=False, quoting=csv.QUOTE_NONE, sep="|", escapechar='`')

def write_excel(this_gdf, output_file):
    '''
    write a geodataframe to an output file
    '''
    this_gdf.to_excel(output_file, index=False, header=True)

def check_us(geom):
    '''
    confirm a geometry is within the US boundary
    '''
    usa_detail = loads('MULTIPOLYGON (((-155.9609583997656 18.63762707089593, -156.2112175986721 19.64953834719702, -156.6136685458337 20.4189417138988, -159.5621155817373 21.72802736723802, -160.3617572040035 21.74021888123406, -160.215110474877 22.07974757325194, -159.4199758941846 22.33705850831207, -156.3192076743352 21.18256226380886, -154.6088099674848 19.4567084712396, -155.9609583997656 18.63762707089593)), ((-94.96993333656609 49.47617195730523, -94.47806189238486 49.08501110346047, -91.85157543566818 48.49093800650174, -89.77216680441367 48.13200241490426, -88.34023710505531 48.46223579692993, -84.53297686731779 46.88336333583117, -82.43984521475892 45.61441215240772, -81.94984337752273 44.38444595328756, -82.09345825142223 43.05157946336912, -82.37918200427389 42.43783321799514, -82.19280869198089 42.03611969600408, -81.149317120139 42.32327747246142, -79.80611116362442 42.61796202187892, -79.6240460486993 43.02329921039417, -79.6240460486993 43.02329921039417, -79.27364288581751 43.64996743127009, -77.11632192809618 43.85312485041328, -74.96471381017828 45.06908237796362, -71.60597466236806 45.07527225966996, -71.45721406849208 45.24482394891037, -71.27956482944691 45.32740430786183, -70.66268795472443 45.62646411803863, -70.42953978375937 46.05984135482285, -70.02674440445827 46.71060898962821, -69.2414477669266 47.4725670634275, -69.02845117760003 47.43588484170467, -69.03561375744017 47.26854027743641, -68.90229309874043 47.20298116846264, -68.2588461702839 47.38783368245827, -68.00105787208211 47.24012579776154, -67.78925092373521 47.08207799144186, -67.73311948469198 45.75613328008806, -67.39922512630997 45.59895366514644, -67.39800282440102 45.36693300762322, -67.46266065836213 45.28441154488122, -67.3540246811706 45.1851716037166, -67.26633838245314 45.21305307447896, -67.12413156025171 45.16860417218037, -66.92820959865472 44.96937798847073, -66.8608508404599 44.82674540286239, -67.26009052411638 44.5620630160956, -69.8487776025777 43.37260620430274, -69.7925032181173 42.58052473372805, -69.67729916834399 40.95898779404254, -73.72410992175344 40.33858059709323, -73.95553546239451 39.6807999981366, -75.62863131612235 36.49318364674583, -75.26520136491312 35.18815893955944, -78.78225500499084 32.98248462056682, -80.93145344980792 31.45055825648002, -81.12139699386543 30.06364472507319, -80.42023047134168 28.58751825587776, -79.89352787823142 26.82058208150362, -79.95329840171838 25.7000122280956, -80.38917370898652 24.66610611639741, -82.39216813432319 24.31863610566054, -82.02798361611313 25.97718640354346, -83.69262241648865 28.86099433241286, -84.87875690782579 29.43034628151496, -86.78046516595857 29.87303379935362, -88.04281637754879 29.71625963680775, -89.16673108124421 28.69357699253343, -93.27895460793499 29.2746979681819, -94.5810190547931 29.10090095771766, -96.36298775214668 28.05060301553233, -97.05230256768299 27.15419441199833, -96.96153776978393 25.92733403943266, -97.1346325400899 25.93619269819605, -97.35923856632368 25.81103179847071, -98.34238381886171 26.04812202219371, -99.13843652337782 26.36712081973356, -99.27879857437215 26.69983915798665, -99.49286008868621 27.07073255128496, -99.65549691455531 27.5096439821156, -100.3113997458189 28.22618605700442, -100.8399774721192 29.18255616954141, -101.4669790796918 29.66353707542919, -102.3573934662079 29.69536794771958, -103.1727633318404 28.86539444693283, -104.6567525393348 29.60614052535101, -104.9596630177214 30.47366238500474, -106.45678158851 31.62301587614407, -108.1324057168451 31.68611292615078, -108.1642330177214 31.26750174780916, -111.0670063608725 31.27324182209728, -114.819031811963 32.4423700177349, -114.965048657652 32.63947684687263, -115.99135 32.57951396903613, -117.1606360309639 32.50903917522877, -119.1156576211934 32.81721034744471, -120.4263777305378 33.81552602822629, -123.7405510952195 38.79133441131624, -124.4812526157372 40.26134266893892, -124.6869891737836 42.84648815247147, -124.1600330514185 45.13578590947745, -124.4843521394404 47.28175191802088, -124.8991903506466 48.4723138645032, -123.2806181656983 48.25685338893048, -123.2581177025208 48.72255973118876, -123.1240524746977 49.01896315748637, -95.51482549267072 49.17152741640735, -95.29383811822123 49.43147856846284, -94.96993333656609 49.47617195730523)), ((-171.7357969152565 63.83219593988133, -171.1045828125645 63.63159405786786, -170.3630527140914 63.78363222009997, -169.6014774604348 63.47458162196299, -168.4565896546582 63.28408732562509, -169.544719555468 62.81418071044514, -170.9669080984124 63.38567259281969, -171.6318690989844 63.25868472559078, -171.9388718181019 63.49450258142696, -171.7357969152565 63.83219593988133)), ((-168.0944574805277 60.12864970050878, -166.1445950668403 60.89884730970547, -166.6193946473568 61.6984408359439, -164.5606759990443 63.43118086507076, -168.5941513797698 64.80969037915712, -169.2961109242773 65.91168464020926, -164.3818866594109 67.08030794510314, -167.1320885029843 68.31947386745682, -166.2147397911538 68.99327760958697, -158.1861270759598 71.71088697466593, -143.1096330372752 70.3863816361003, -140.986 69.712, -140.9924987520294 66.00002859156868, -140.9857391437889 60.31704152664838, -140.4273640553839 60.3146429782285, -139.9846195770345 60.21796254024276, -139.6837257149311 60.36385568907192, -139.0304491671901 60.42285790386506, -139.1349312515867 60.07666950840381, -138.6722385493127 59.91899072898157, -137.5707283108348 59.25537205447423, -137.4354658949204 58.99868757793772, -136.2469960417847 59.66943940471225, -135.4862572925394 59.81124140821357, -135.0509817781084 59.65543312428499, -134.8862160091308 59.33631512805115, -134.5010477360518 59.18741995195936, -133.4665061407344 58.59574425452905, -130.0517549381211 56.18241936533536, -129.891944012902 56.00341200485683, -129.8462772479804 55.27364504238029, -131.0265777421084 54.21142476176492, -133.6322112295636 54.43235989317645, -135.8136490996004 56.73926987469088, -137.0446852577669 58.25665592498179, -140.0501000396554 59.49926254424224, -147.7973480244522 59.66392385355736, -150.9375695597168 58.98967784295922, -152.456282354142 56.95860070293679, -157.474659630171 54.81629354174907, -163.3689240165132 54.0895550032468, -167.5217709621989 52.89040416042576, -177.656771196689 51.19393366786368, -179.5435644377429 51.01811902132479, -179.1740513469189 52.01383842470091, -168.9162104752392 53.56334146260917, -161.8275983555726 55.9689785058153, -161.0022003487773 57.60544491286849, -168.0944574805277 60.12864970050878)), ((-172.8621361372917 60.63017383539014, -172.6881094361141 60.46342435766469, -172.2215200745265 60.38207425291829, -172.2041649460752 60.27721083186458, -172.6592546095491 60.29747824738019, -173.1280429275684 60.48021479159154, -173.0504961622277 60.60302768909725, -172.8621361372917 60.63017383539014)), ((-170.4354619535265 57.24419946184956, -170.1024313858875 57.29644246771957, -169.3838532268877 56.61911767123141, -169.6495840703399 56.45422192742632, -170.4100257232047 57.09424041805096, -170.4354619535265 57.24419946184956)))')
    if type(geom) == str:
        geom = loads(geom)
    return geom.within(usa_detail)

def union_dfs(ldf, rdf):
    '''
    smash together multiple GeoDataFrames with a union
    '''
    return gpd.overlay(ldf, rdf, how= 'union')

def intersect_dfs(ldf, rdf):
    '''
    smash together multiple GeoDataFrames with an intersect
    '''
    return gpd.overlay(ldf, rdf, how= 'intersection')

def reduce_dfs(list_of_dfs, smash_function):
    '''
    smash together a list of GeoDataFrames
    '''
    return reduce(smash_function, [df for df in list_of_dfs])

def visualize_gdf(geodf):
    aerial_tiles = 'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'
    # nat_geo_tiles = 'http://services.arcgisonline.com/arcgis/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}'
    aerial_attr = 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
    center = [geodf.geometry.head(1)[0].centroid.y, geodf.geometry.head(1)[0].centroid.x]
    fmap = folium.Map(location=center, tiles=aerial_tiles, attr=aerial_attr, zoom_start=17, width='100%', height='75%')
    if geodf.crs == None:
        geodf.crs = {'init': 'epsg:4326', 'no_defs': True}
    folium.GeoJson(geodf).add_to(fmap)
    display(fmap)


def get_bbox(wkt):
    bbox = wkt.bounds
    minx = bbox[0]
    miny = bbox[1]
    maxx = bbox[2]
    maxy = bbox[3]

    bounding_poly = loads('POLYGON((%s %s, %s %s, %s %s, %s %s, %s %s))' %(minx, miny, minx, maxy, maxx, maxy, maxx, miny, minx, miny))
    return bounding_poly

def check_text(text_list):
    '''
    compare list of text features 
    '''
    ratio = reduce(fuzz.ratio, [t for t in text_list])
    return ratio

def explode_geometries(this_gdf):
    this_exploded_geometries = this_gdf.explode().reset_index().rename(columns = {0: 'split_geometry'})
    this_exploded_geometries_merged = this_exploded_geometries.merge(this_gdf.drop('geometry', axis=1), left_on='level_0', right_index=True)
    this_exploded_geometries_merged = this_exploded_geometries_merged.drop('level_0', axis=1).drop('level_1', axis=1)
    this_exploded_gdf = GeoDataFrame(this_exploded_geometries_merged, geometry=this_exploded_geometries_merged.split_geometry)
    return this_exploded_gdf

def get_area(geom, decimals):
    return "{:.0f}".format((float((round(transform(project, geom).area, decimals)))))

def get_link(lat, lng):
    url = 'https://www.google.com/maps/search/%s,%20%s?hl=en&source=opensearch' % (lat, lng)
    return url